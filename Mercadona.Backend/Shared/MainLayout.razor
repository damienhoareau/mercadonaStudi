@using Mercadona.Backend.Areas.Identity;
@using Mercadona.Backend.Components;
@using Mercadona.Backend.Helpers;
@using Mercadona.Backend.Models;
@using Mercadona.Backend.Services.Interfaces;
@using MudBlazor.Utilities;
@using System.Security.Claims;
@inherits LayoutComponentBase;
@implements IDisposable;
@inject ITokenLifetimeValidator _tokenLifetimeValidator;
@inject IAuthenticationService _authenticationService;
@inject IServiceProvider _serviceProvider;
@inject IHostEnvironmentAuthenticationStateProvider _hostAuthentication;
@inject IJSRuntime _jsRuntime;
@inject NavigationManager _navigationManager;
@inject IDialogService _dialogService;
@inject ISnackbar _snackbar;

<PageTitle>Mercadona.Backend</PageTitle>

<MudThemeProvider Theme="CustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

    <MudLayout>
        <MudAppBar Elevation="1">
            <AuthorizeView>
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                </Authorized>
            </AuthorizeView>
            <MudContainer Class="logoContainer"><MudContainer Class="o-logo ml-2"></MudContainer></MudContainer>
            <AuthorizeView>
                <Authorized>
                    <UserInfo />
                </Authorized>
                <NotAuthorized>
                    <MudButton Color="Color.Inherit" OnClick="@((e)=>OpenLoginDialog())">Se&nbsp;connecter</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen" Variant="DrawerVariant.Temporary">
            <MudElement HtmlTag="div" Class="d-flex align-center openDrawer">
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="openDrawerIcon" />
                <MudElement HtmlTag="div" Class="o-drawer-logo" />
            </MudElement>
            <MudDivider Class="flex-grow-0" />
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>

@code{
    public const string TOKEN_WARNING_SNACKBAR_KEY = "tokenLifetimeWarning";

    protected override Task OnInitializedAsync()
    {
        _tokenLifetimeValidator.TokenExpirationWarningChanged += async (s, e) => await OnTokenExpirationWarningChanged(s, e);
        return base.OnInitializedAsync();
    }

    #region IDisposable

    public void Dispose()
    {
        _tokenLifetimeValidator.TokenExpirationWarningChanged -= async (s, e) => await OnTokenExpirationWarningChanged(s, e);
    }

    #endregion

    #region AuthenticationState changed

    public static Action<SnackbarOptions> SnackbarConfig = (SnackbarOptions options) =>
    {
        options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        options.HideTransitionDuration = 1000;
        options.RequireInteraction = true;
    };

    async Task OnTokenExpirationWarningChanged(object? sender, TokenExpirationWarningChangedArgs eventArgs)
    {
        switch(eventArgs.TokenExpirationWarningEnum)
        {
            case TokenExpirationWarning.LogoutNeeded:
                if (SnackbarHelper.ShownSnackbars.TryGetValue(TOKEN_WARNING_SNACKBAR_KEY, out Snackbar? snackbar))
                {
                    _snackbar.Remove(snackbar);
                    SnackbarHelper.ShownSnackbars.Remove(TOKEN_WARNING_SNACKBAR_KEY);
                }
                IConnectedUserProvider _connectedUserProvider = _serviceProvider.GetRequiredService<IConnectedUserProvider>();
                IJSObjectReference authModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
                await authModule.InvokeVoidAsync("Logout", _connectedUserProvider.ConnectedUser?.AccessToken);
                _connectedUserProvider.ConnectedUser = null;
                _hostAuthentication.SetAuthenticationState(Task.FromResult(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()))));
                _navigationManager.NavigateTo("/");
                break;
            case TokenExpirationWarning.OneMinuteLeft:
                if (!SnackbarHelper.ShownSnackbars.ContainsKey(TOKEN_WARNING_SNACKBAR_KEY))
                    SnackbarHelper.ShownSnackbars.Add(TOKEN_WARNING_SNACKBAR_KEY, _snackbar.Add(@<TokenExpirationWarningMessage ValidTo=eventArgs.ValidTo!.Value RefreshToken="RefreshToken" />, Severity.Error, configure: SnackbarConfig, key: TOKEN_WARNING_SNACKBAR_KEY));
                break;
            case TokenExpirationWarning.FiveMinutesLeft:
                if (!SnackbarHelper.ShownSnackbars.ContainsKey(TOKEN_WARNING_SNACKBAR_KEY))
                    SnackbarHelper.ShownSnackbars.Add(TOKEN_WARNING_SNACKBAR_KEY, _snackbar.Add(@<TokenExpirationWarningMessage ValidTo=eventArgs.ValidTo!.Value RefreshToken="RefreshToken" />, Severity.Warning, configure: SnackbarConfig, key: TOKEN_WARNING_SNACKBAR_KEY));
                break;
            default:
                break;
        }
    }

    async Task RefreshToken()
    {
        try
        {
            IConnectedUserProvider _connectedUserProvider = _serviceProvider.GetRequiredService<IConnectedUserProvider>();
            IJSObjectReference authModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
            string newAccessToken = await authModule.InvokeAsync<string>("RefreshToken", _connectedUserProvider.ConnectedUser?.AccessToken);
            _connectedUserProvider.ConnectedUser!.AccessToken = newAccessToken;
            if (SnackbarHelper.ShownSnackbars.TryGetValue(TOKEN_WARNING_SNACKBAR_KEY, out Snackbar? snackbar))
            {
                _snackbar.Remove(snackbar);
                SnackbarHelper.ShownSnackbars.Remove(TOKEN_WARNING_SNACKBAR_KEY);
            }
        }
        catch(Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    #endregion

    #region Drawer

    private bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    #endregion

    #region ThemeManager

    private MudTheme CustomTheme
    {
        get
        {
            MudTheme theme = new MudTheme();
            MudColor cucumber = new MudColor("#00ab61ff");
            MudColor white = new MudColor("#fff");
            theme.Palette.Primary = cucumber;
            theme.Palette.AppbarBackground = white;
            theme.Palette.AppbarText = cucumber;
            theme.Palette.DrawerBackground = cucumber;
            theme.Palette.DrawerText = white;
            if (!theme.Typography.Default.FontFamily.Contains("Muli"))
            {
                string[] selectedFontFamily = new[] { "Muli" };
                theme.Typography.Default.FontFamily = selectedFontFamily.Concat(theme.Typography.Default.FontFamily).ToArray();
            }
            theme.LayoutProperties.DrawerWidthLeft = "300px";
            return theme;
        }
    }

    #endregion

    #region Login

    void OpenLoginDialog()
    {
        _dialogService.Show<LoginDialog>("Se connecter");
    }

    #endregion
}
