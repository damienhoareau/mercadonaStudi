@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@using FluentValidation;
@using Mercadona.Backend.Validation;

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@applyOfferToProductForm" Validation="@(ValidatorExt.ValidateValue(_offerValidator))">
            <MudText>@Product.Label</MudText>
            <MudSelect T="Offer" Label="Promotions existantes" @bind-Value="SelectedOffer" AdornmentIcon="@Icons.Material.Filled.LocalOffer" AdornmentColor="Color.Primary">
                @foreach (Offer existingOffer in existingOffers)
                {
                    <MudSelectItem T="Offer" Value="@existingOffer">@existingOffer.StartDate - @existingOffer.EndDate : @existingOffer.Percentage</MudSelectItem>
                }
            </MudSelect>
            <MudDateRangePicker Label="Période de la promotion" @bind-DateRange="OfferDateRange" IsDateDisabledFunc="IsDateDisabled" AdornmentColor="Color.Primary" />
            <MudNumericField @bind-Value="model.Percentage" For="@(() => model.Percentage)" Min=@Offer.PercentageMin Max=@Offer.PercentageMax Immediate="true" Label="Pourcentage" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Product Product { get; set; }
    [Inject] IValidator<Offer> _offerValidator { get; set; }
    [Inject] IValidator<(Product product, Offer offer)> _productAddOfferValidator { get; set; }

    protected override Task OnInitializedAsync()
    {
        model = new Offer()
        {
            StartDate = DateOnly.FromDateTime(OfferDateRange.Start ?? DateTime.Now.Date),
            EndDate = DateOnly.FromDateTime(OfferDateRange.End ?? DateTime.Now.Date.AddDays(5).Date),
            Percentage = 0
        };
        existingOffers = new List<Offer>()
        {
            new Offer(){ StartDate = DateOnly.FromDateTime(DateTime.Now.Date), EndDate = DateOnly.FromDateTime(DateTime.Now.Date), Percentage = 0.1M },
            new Offer(){ StartDate = DateOnly.FromDateTime(DateTime.Now.AddDays(7).Date), EndDate = DateOnly.FromDateTime(DateTime.Now.AddDays(10).Date), Percentage = 0.5M },
            new Offer(){ StartDate = DateOnly.FromDateTime(DateTime.Now.AddDays(14).Date), EndDate = DateOnly.FromDateTime(DateTime.Now.AddDays(20).Date), Percentage = 0.1M },
        };
        return base.OnInitializedAsync();
    }

    MudForm applyOfferToProductForm;

    IEnumerable<Offer> existingOffers = Array.Empty<Offer>();

    Offer model = new Offer();

    DateRange _offerDateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    DateRange OfferDateRange
    {
        get => _offerDateRange;
        set
        {
            _offerDateRange = value;
            model.StartDate = DateOnly.FromDateTime(_offerDateRange.Start!.Value);
            model.EndDate = DateOnly.FromDateTime(_offerDateRange.End!.Value);

            _selectedOffer = null;
            StateHasChanged();
        }
    }

    Offer? _selectedOffer = null;
    Offer? SelectedOffer
    {
        get => _selectedOffer;
        set
        {
            _selectedOffer = value;
            if (_selectedOffer != null)
            {
                OfferDateRange = new DateRange(_selectedOffer.StartDate.ToDateTime(TimeOnly.MinValue), _selectedOffer.EndDate.ToDateTime(TimeOnly.MinValue));
                model.Percentage = _selectedOffer.Percentage;
            }
        }
    }

    bool IsDateDisabled(DateTime dateTime)
    {
        return dateTime.Date < DateTime.Now.Date;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}
