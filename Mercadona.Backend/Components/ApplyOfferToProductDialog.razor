@using FluentValidation;
@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@using Mercadona.Backend.Services.Interfaces;
@using Mercadona.Backend.Validation;
@inject IDialogService _dialogService;
@inject IOfferService _offerService;
@inject IDiscountedProductService _discountedProductService;
@inject ISnackbar _snackbar;

<MudDialog Class="customDialog">
    <DialogContent>
        <MudForm Model="@model" @ref="@applyOfferToProductForm" Validation="@(ValidatorExt.ValidateValue(_offerValidator))">
            <MudText Typo="Typo.h6">@Product.Label</MudText>
            <MudSelect T="Offer" Label="Promotions existantes" @bind-Value="SelectedOffer" AdornmentIcon="@Icons.Material.Filled.LocalOffer" AdornmentColor="Color.Primary"
                       Disabled="@(!existingOffers.Any())">
                <Virtualize Items="@existingOffers" Context="existingOffer">
                    <MudSelectItem T="Offer" Value="@existingOffer">
                        <OfferElement Offer="@existingOffer" />
                    </MudSelectItem>
                </Virtualize>
            </MudSelect>
            <MudDateRangePicker Label="Période de la promotion" @bind-DateRange="OfferDateRange" IsDateDisabledFunc="IsDateDisabled" AdornmentColor="Color.Primary" PickerVariant="PickerVariant.Inline"  DisableToolbar/>
            <MudNumericField @ref="@percentageField" @bind-Value="model.Percentage" Step="10" For="@(() => model.Percentage)" Min=@Offer.PercentageMin Max=@Offer.PercentageMax Immediate="true" Label="Pourcentage" Adornment="Adornment.End" AdornmentText="%" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(CanNotAdd || _processing)">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">En cours</MudText>
            }
            else
            {
                <MudText>Ok</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public DiscountedProduct Product { get; set; } = null!;
    [Inject] IValidator<Offer> _offerValidator { get; set; } = null!;

    MudForm applyOfferToProductForm = null!;
    MudNumericField<int> percentageField = null!;

    protected override async Task OnInitializedAsync()
    {
        model = new Offer()
        {
            StartDate = DateOnly.FromDateTime(OfferDateRange.Start ?? DateTime.Now.Date),
            EndDate = DateOnly.FromDateTime(OfferDateRange.End ?? DateTime.Now.Date.AddDays(5).Date),
            Percentage = 10
        };
        existingOffers = (await _offerService.GetAllAsync()).ToList();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
            await percentageField.FocusAsync();
        await applyOfferToProductForm.Validate();
        StateHasChanged();
    }

    List<Offer> existingOffers = new List<Offer>();
    Offer model = new Offer();

    DateRange _offerDateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    DateRange OfferDateRange
    {
        get => _offerDateRange;
        set
        {
            _offerDateRange = value;
            model.StartDate = DateOnly.FromDateTime(_offerDateRange.Start!.Value);
            model.EndDate = DateOnly.FromDateTime(_offerDateRange.End!.Value);

            StateHasChanged();
        }
    }

    Offer? _selectedOffer;
    public Offer? SelectedOffer
    {
        get
        {
            if (model == null)
                return null;
            return existingOffers.FirstOrDefault(_ => _.StartDate == model.StartDate && _.EndDate == model.EndDate && _.Percentage == model.Percentage);
        }
        set
        {
            _selectedOffer = value;
            if (_selectedOffer == null)
                return;
            _offerDateRange = new DateRange(_selectedOffer.StartDate.ToDateTime(TimeOnly.MinValue), _selectedOffer.EndDate.ToDateTime(TimeOnly.MinValue));
            model.StartDate = _selectedOffer.StartDate;
            model.EndDate = _selectedOffer.EndDate;
            model.Percentage = _selectedOffer.Percentage;
        }
    }
    void SelectedOfferChanged(Offer newOffer)
    {
        if (newOffer == null)
            return;
        _offerDateRange = new DateRange(newOffer.StartDate.ToDateTime(TimeOnly.MinValue), newOffer.EndDate.ToDateTime(TimeOnly.MinValue));
        model.StartDate = newOffer.StartDate;
        model.EndDate = newOffer.EndDate;
        model.Percentage = newOffer.Percentage;
    }

    bool IsDateDisabled(DateTime dateTime)
    {
        return dateTime.Date < DateTime.Now.Date;
    }

    bool CanNotAdd => model.Percentage <= 0
        || model.Percentage >= 100;

    private bool _processing = false;

    async Task Submit()
    {
        _processing = true;
        try
        {
            DiscountedProduct discountedProduct = await _discountedProductService.ApplyOfferAsync(Product.Id, model);
            MudDialog.Close(DialogResult.Ok(discountedProduct));
        }
        catch (ValidationException ex)
        {
            bool replaceConfirmation = await Confirm(ex);
            if (replaceConfirmation)
            {
                try
                {
                    DiscountedProduct discountedProduct = await _discountedProductService.ApplyOfferAsync(Product.Id, model, true);
                    MudDialog.Close(DialogResult.Ok(discountedProduct));
                }
                catch(Exception innerEx)
                {
                    _snackbar.Add(innerEx.Message, MudBlazor.Severity.Error);
                    await percentageField.FocusAsync();
                }
            }
            else
                await percentageField.FocusAsync();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            await percentageField.FocusAsync();
        }
        finally
        {
            _processing = false;
        }
    }

    private RenderFragment<(ValidationException ex, Offer newOffer)> ConfirmDialogContent =
    args => @<ConflictOffers Exception=@args.ex NewOffer=@args.newOffer />;

    async Task<bool> Confirm(ValidationException ex)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("DialogContent", ConfirmDialogContent((ex, model)));
        parameters.Add("Type", ConfirmDialog.DialogType.Warning);
        IDialogReference confirmDialogRef = await _dialogService.ShowAsync<ConfirmDialog>("Des offres existantes sont en conflit", parameters, options);
        DialogResult dialogResult = await confirmDialogRef.Result;
        return !dialogResult.Canceled && dialogResult.Data is bool result && result;
    }

    void Cancel() => MudDialog.Cancel();
}
