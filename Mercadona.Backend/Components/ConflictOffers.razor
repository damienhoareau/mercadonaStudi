@using FluentValidation;
@using Mercadona.Backend.Data;
@using Mercadona.Backend.Services.Interfaces;

<MudText>
    Voulez-vous supprimer ces offres ?
</MudText>
<MudList Dense>
    @foreach (Offer conflictedOffer in Exception.Errors.Select(_ => _.AttemptedValue).OfType<Offer>())
    {
        <MudListItem>
            <OfferElement Offer="@conflictedOffer"/>
        </MudListItem>
    }
</MudList>
<MudText>
    Et ne garder que la nouvelle ?
</MudText>
<MudList Dense>
    <MudListItem>
        <OfferElement Offer="@NewOffer" />
    </MudListItem>
</MudList>

@code {
    [Parameter] public ValidationException Exception { get; set; } = null!;
    [Parameter] public Offer NewOffer { get; set; } = null!;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
}
