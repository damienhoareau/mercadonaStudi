@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@using Mercadona.Backend.Services.Interfaces;
@inject IDialogService _dialogService;
@inject IDiscountedProductService _discountedProductService;

<MudSelect T="string" Class="ma-3" Label="Catégories" AnchorOrigin="Origin.BottomCenter" MultiSelection="true" @bind-SelectedValues="SelectedCategories" SelectAll="true" SelectAllText="Toutes les catégories" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
    @foreach (string category in categories)
    {
        <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
    }
</MudSelect>
<MudGrid Style="width:100%;margin:unset">
    <Virtualize Items="@filteredDiscountedProducts" Context="discountedProduct">
        <MudItem xs="6" sm="4" md="3">
            <ProductCard CanEdit=@CanEdit DiscountedProduct=@discountedProduct OnAddOffer="RefreshProducts" />
        </MudItem>
    </Virtualize>
</MudGrid>
@if (CanEdit)
{
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="position: fixed;bottom: 10px; right: 10px" Title="Ajouter un produit" OnClick="OpenAddProductDialog" />
}

@code {
    [Parameter] public bool CanEdit { get; set; } = false;

    private List<DiscountedProduct> discountedProducts = new List<DiscountedProduct>();
    private List<string> categories => discountedProducts.GroupBy(_ => _.Category).Select(_ => _.Key).OrderBy(_ => _).ToList();
    List<DiscountedProduct> filteredDiscountedProducts => discountedProducts.Where(_ => SelectedCategories.Any() ? SelectedCategories.Contains(_.Category) : true).ToList();

    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
        await base.OnInitializedAsync();
    }

    async Task RefreshProducts()
    {
        discountedProducts = (await _discountedProductService.GetAllAsync()).ToList();
    }

    IEnumerable<string> SelectedCategories { get; set; } = new HashSet<string>();

    async Task OpenAddProductDialog()
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("DiscountedProducts", discountedProducts);
        IDialogReference addProductDialogRef = await _dialogService.ShowAsync<AddProductDialog>("Ajouter un produit", parameters, options);
        DialogResult dialogResult = await addProductDialogRef.Result;

        if (!dialogResult.Canceled)
        {
            await RefreshProducts();
        }
    }
}
