@using Mercadona.Backend.Models;
@using Mercadona.Backend.Services.Interfaces;
@using System.Security.Claims;
@inject NavigationManager _navigationManager;
@inject IAuthenticationService _authenticationService;
@inject ConnectedUser _connectedUser;
@inject IHostEnvironmentAuthenticationStateProvider _hostAuthentication;
@inject IJSRuntime _jsRuntime;

<AuthorizeView>
    <Authorized>
        <MudMenu AnchorOrigin="Origin.BottomRight" Dense="true">
            <ActivatorContent>
                <MudAvatar Color="Color.Primary">@context.User.Identity?.Name?.ToUpperInvariant().First()</MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudText Style="margin: 10px" Align="Align.Center">@context.User.Identity?.Name</MudText>
                <MudMenuItem Style="text-align: center; color: var(--mud-palette-primary)" OnClick="Logout">Se déconnecter</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
</AuthorizeView>

@code {
    async Task Logout()
    {
        await _authenticationService.LogoutAsync(_connectedUser.RefreshToken);
        _connectedUser.UserName = string.Empty;
        _connectedUser.RefreshToken = string.Empty;
        _connectedUser.AccessToken = string.Empty;
        _hostAuthentication.SetAuthenticationState(Task.FromResult(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()))));
        IJSObjectReference authModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
        await authModule.InvokeVoidAsync("ClearCookie");
        _navigationManager.NavigateTo("/");
    }
}
