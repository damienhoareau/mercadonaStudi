@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@using FluentValidation;
@using Mercadona.Backend.Services.Interfaces;
@using Mercadona.Backend.Validation;
@inject IProductService _productService;
@inject ISnackbar _snackbar;

<MudDialog Class="customDialog">
    <DialogContent>
        <MudForm Model="@model" @ref="@addProductForm" Validation="@(ValidatorExt.ValidateValue(_productValidator))">
            <MudTextField @ref="@labelField" @bind-Value="model.Label" For="@(() => model.Label)" Immediate="true" Label="Libellé" Required />
            <MudTextField @bind-Value="model.Description" For="@(() => model.Description)" Immediate="true" Label="Description" Lines="3" Required />
            <MudAutocomplete T="string" SearchFuncWithCancel="@SearchCategories" OpenIcon="" CloseIcon="" CoerceText="false" @bind-Value="model.Category" TextChanged="@CategoryTextChanged" For="@(() => model.Category)" Immediate="true" Label="Catégorie" Required />
            <MudNumericField @bind-Value="model.Price" For="@(() => model.Price)" Min=@Product.PriceMin Immediate="true" Label="Prix" Format="N2" Adornment="Adornment.End" AdornmentText="€" />
            <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           Accept="@(string.Join(",", acceptedExtensions))"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="100px" Outlined="true" Class="@DragClass">
                        <MudElement HtmlTag="div" Class="d-flex justify-center align-center">
                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Class="mr-1" />
                            <MudText Typo="Typo.h6">Glisser une image ou cliquer ici (Max 5MB)</MudText>
                        </MudElement>
                        @if (file != null)
                        {
                            <MudChip Color="Color.Primary" Text="@file.Name" Class="align-self-center" />
                        }
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(CanNotAdd || _processing)">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">En cours</MudText>
            }
            else
            {
                <MudText>Ok</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<DiscountedProduct> DiscountedProducts { get; set; } = null!;
    [Inject] IValidator<Product> _productValidator { get; set; } = null!;

    MudForm addProductForm = null!;
    MudTextField<string> labelField = null!;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
            await labelField.FocusAsync();
        await addProductForm.Validate();
    }

    Product model = new Product();

    Task<IEnumerable<string>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        if (value == null)
            return Task.FromResult<IEnumerable<string>>(Array.Empty<string>());
        return Task.Run(() => DiscountedProducts.GroupBy(_ => _.Category).Select(_ => _.Key).OrderBy(_ => _).Where(_ => _.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    void CategoryTextChanged(string newCategory)
    {
        model.Category = newCategory;
    }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-2 mt-2 d-flex flex-column mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> acceptedExtensions = new List<string> { ".bmp",".gif",".jpeg",".jpg",".png" };
    private IBrowserFile? file { get; set; }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        IReadOnlyList<IBrowserFile> files = e.GetMultipleFiles();
        IBrowserFile candidateFile = files.First();
        if (!acceptedExtensions.Contains(Path.GetExtension(candidateFile.Name))
            || candidateFile.Size > 5 * 1024 * 1024)
            return;
        file = candidateFile;
    }

    private void SetDragClass(DragEventArgs args)
    {
        if (args.DataTransfer.Items.First().Type.StartsWith("image/"))
        {
            DragClass = $"{DefaultDragClass} mud-border-primary";
        }
        else
        {
            DragClass = $"{DefaultDragClass} mud-border-error";
        }
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    bool CanNotAdd => string.IsNullOrWhiteSpace(model.Label)
        || string.IsNullOrWhiteSpace(model.Description)
        || string.IsNullOrWhiteSpace(model.Category)
        || model.Price <= 0
        || file == null;

    async Task<MemoryStream> MemoryStreamFromIBrowserFile(IBrowserFile browserFile, CancellationToken cancellationToken = default)
    {
        Stream browserFileStream = browserFile.OpenReadStream(5 * 1024 * 1024, cancellationToken);
        MemoryStream memoryStream = new MemoryStream();
        await browserFileStream.CopyToAsync(memoryStream, cancellationToken);
        memoryStream.Position = 0;
        return memoryStream;
    }

    private bool _processing = false;

    async Task Submit()
    {
        _processing = true;
        try
        {
            MemoryStream memoryStream = await MemoryStreamFromIBrowserFile(file!);
            Product productToAdd = new Product(() => memoryStream)
            {
                Label = model.Label,
                Description = model.Description,
                Category = model.Category,
                Price = model.Price
            };
            Product addedProduct = await _productService.AddProductAsync(productToAdd);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ValidationException ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            await labelField.FocusAsync();
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            await labelField.FocusAsync();
        }
        finally
        {
            _processing = false;
        }
    }

    void Cancel() => MudDialog.Cancel();
}
