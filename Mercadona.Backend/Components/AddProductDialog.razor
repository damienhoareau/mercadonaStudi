@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@using FluentValidation;
@using Mercadona.Backend.Validation;

<MudDialog Class="customDialog">
    <DialogContent>
        <MudForm Model="@model" @ref="@addProductForm" Validation="@(ValidatorExt.ValidateValue(_productValidator))">
            <MudTextField @ref="@labelField" @bind-Value="model.Label" For="@(() => model.Label)" Immediate="true" Label="Libellé" Required />
            <MudTextField @bind-Value="model.Description" For="@(() => model.Description)" Immediate="true" Label="Description" Lines="3" Required />
            <MudAutocomplete T="string" SearchFuncWithCancel="@SearchCategories" OpenIcon="" CloseIcon="" CoerceText="false" @bind-Value="model.Category" TextChanged="@CategoryTextChanged" For="@(() => model.Category)" Immediate="true" Label="Catégorie" Required />
            <MudNumericField @bind-Value="model.Price" For="@(() => model.Price)" Min=@Product.PriceMin Immediate="true" Label="Prix" Format="N2" Adornment="Adornment.End" AdornmentText="€" />
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="100px" Outlined="true" Class="@DragClass" Style="display: grid; grid-template-rows: 1fr auto">
                        <MudText>Glisser l'image ici.</MudText>
                        @foreach(var file in fileNames)
                        {
                            <MudChip Color="Color.Dark" Text="@file"/>
                        }
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Parcourir</MudButton>
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<DiscountedProduct> DiscountedProducts { get; set; } = null!;
    [Inject] IValidator<Product> _productValidator { get; set; } = null!;

    MudForm addProductForm = null!;
    MudTextField<string> labelField = null!;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
            await labelField.FocusAsync();
        await addProductForm.Validate();
    }

    Product model = new Product();

    Task<IEnumerable<string>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        if (value == null)
            return Task.FromResult<IEnumerable<string>>(Array.Empty<string>());
        return Task.Run(() => DiscountedProducts.GroupBy(_ => _.Category).Select(_ => _.Key).OrderBy(_ => _).Where(_ => _.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    void CategoryTextChanged(string newCategory)
    {
        model.Category = newCategory;
    }

    static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-1 mt-2 mud-width-full mud-height-full z-10 justify-center";
    string DragClass = DefaultDragClass;
    List<string> fileNames = new List<string>();

    void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach(var file in files)
        {
            fileNames.Add(file.Name);
        }
    }

    async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}
