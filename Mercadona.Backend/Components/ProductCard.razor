@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;
@inject IDialogService _dialogService;

<MudCard Class="productCard">
    <MudCardMedia Class="productCardMedia" Image=@($"/api/products/image?productId={DiscountedProduct.Id}") />
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@DiscountedProduct.Label</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudChip Color="Color.Primary" Size="Size.Small">@DiscountedProduct.Category</MudChip>
        <MudText>@DiscountedProduct.Description</MudText>
        <MudText Class="@(DiscountedProduct.Offer == null ? "productPrice" : "productPrice discount")">@(DiscountedProduct.DiscountedPrice)€</MudText>
    </MudCardContent>
    @if (CanEdit)
    {
        <MudCardActions Style="flex: 1; align-items: flex-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenAddOfferDialog(DiscountedProduct))">Ajouter promotion</MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public bool CanEdit { get; set; } = false;
    [Parameter] public DiscountedProduct DiscountedProduct { get; set; } = null!;
    [Parameter] public EventCallback<DiscountedProduct> OnAddOffer { get; set; }

    async Task OpenAddOfferDialog(DiscountedProduct discountedProduct)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Product", DiscountedProduct);
        IDialogReference addOfferDialogRef = await _dialogService.ShowAsync<ApplyOfferToProductDialog>("Appliquer une promotion à un produit", parameters, options);
        DialogResult dialogResult = await addOfferDialogRef.Result;

        if (!dialogResult.Canceled)
        {
            await OnAddOffer.InvokeAsync((DiscountedProduct)dialogResult.Data);
        }
    }
}
