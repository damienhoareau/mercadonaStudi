@inject IDialogService DialogService
@using Mercadona.Backend.Data;
@using Mercadona.Backend.Models;

<MudCard Class="productCard">
    <MudCardMedia Class="productCardMedia" Image=@(GetImageURL(DiscountedProduct.Id)) />
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@DiscountedProduct.Label</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudChip Color="Color.Primary" Size="Size.Small">@DiscountedProduct.Category</MudChip>
        <MudText>@DiscountedProduct.Description</MudText>
        <MudText Class="@(DiscountedProduct.Offer == null ? "productPrice" : "productPrice discount")">@(DiscountedProduct.DiscountedPrice)€</MudText>
    </MudCardContent>
    @if (CanEdit)
    {
        <MudCardActions Style="flex: 1; align-items: flex-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenAddOfferDialog(DiscountedProduct))">Ajouter promotion</MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    [Parameter] public bool CanEdit { get; set; } = false;
    [Parameter] public DiscountedProduct DiscountedProduct { get; set; }

    // TODO : Remove
    [Parameter] public List<Product> products { get; set; }

    string? GetImageURL(Guid productId)
    {
        if (products.FirstOrDefault(_ => _.Id == productId)?.ImageStream is FileStream fileStream)
            return $"assets/{Path.GetFileName(fileStream.Name)}";
        else
            return null;
    }

    void OpenAddOfferDialog(DiscountedProduct discountedProduct)
    {
        DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Product", products.Single(_ => _.Id == discountedProduct.Id));
        DialogService.Show<ApplyOfferToProductDialog>("Appliquer une promotion à un produit", parameters, options);
    }
}
